
plugins {
    id "c"
    id "cpp"
    id "edu.wpi.first.GradleRIO" version "2022.4.1"
}

// Define deploy targets and artifacts
deploy {
    targets {
        roborio(getTargetTypeClass("RoboRIO")) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // Deploy the shim
                wrenShim(getArtifactTypeClass("FRCNativeArtifact")) {
                }
                // Deploy everything under ./deploy/ to /home/lvuser/deploy
                frcStaticFiles(getArtifactTypeClass("FileTreeArtifact")) {
                    files = project.fileTree("deploy")
                    directory = "/home/lvuser/deploy"
                }
                // Deploy wbot wren code
                wbotLib(getArtifactTypeClass("FileTreeArtifact")) {
                    files = project.fileTree("src/shim/wren")
                    directory = "/home/lvuser/wbot"
                }
                // Deploy user wren code
                wbotUser(getArtifactTypeClass("FileTreeArtifact")) {
                    files = project.fileTree("src/wren")
                    directory = "/home/lvuser/wren"
                }
            }
        }
    }
}

wpi.cpp.debugSimulation = true
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

model {
    components {
        // Shim program
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            targetPlatform wpi.platforms.desktop

            sources.cpp {
                source {
                    srcDir 'src/shim/cpp'
                }
                exportedHeaders {
                    srcDir 'src/shim/include'

                    srcDir 'deps/wren/src/include'
                    srcDir 'deps/wrenbind17/include'

                    include '**/*.hpp'
                }

                lib library: "wren", linkage: 'static'
            }

            deploy.targets.roborio.artifacts.wrenShim.component = it

            wpi.cpp.enableExternalTasks(it)

            wpi.sim.enable(it)

            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
        // Wren VM
        wren(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
            targetPlatform wpi.platforms.desktop

            sources.c {
                source {
                    srcDir 'deps/wren/build'

                    include '**/*.c'
                }
                exportedHeaders {
                    srcDir 'deps/wren/src/include'
                }
            }
        }
    }
}

