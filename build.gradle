
plugins {
    id "c"
    id "cpp"
    id "edu.wpi.first.GradleRIO" version "2022.0.0-alpha-2"
}

wpi.maven.useDevelopment = true
wpi.wpilibVersion = '2022.+'
wpi.wpimathVersion = '2022.+'

// Define deploy targets and artifacts
deploy {
    targets {
        roboRIO("roborio") {
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        // Deploy the shim
        frcNativeArtifact('wbotShim') {
            targets << "roborio"
            component = 'frcUserProgram'
            debug = frc.getDebugOrDefault(false)
        }
        // Deploy everything under ./deploy/ to /home/lvuser/deploy
        fileTreeArtifact('frcStaticFiles') {
            files = fileTree(dir: 'deploy')
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
        // Deploy wbot wren code
        fileTreeArtifact('wbotLib') {
            files = fileTree(dir: 'src/shim/wren')
            targets << "roborio"
            directory = '/home/lvuser/wbot'
        }
        // Deploy user wren code
        fileTreeArtifact('wbotUser') {
            files = fileTree(dir: 'src/wren')
            targets << "roborio"
            directory = '/home/lvuser/wren'
        }
    }
}

dependencies {
    // In C++ for now, the argument must be true
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, true)
    simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, true)

    // Websocket extensions require additional configuration.
    // simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, true)
    // simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, true)
}

// Simulation configuration (e.g. environment variables).
sim {
    // Sets the websocket client remote host.
    // envVar "HALSIMWS_HOST", "10.0.0.2"
}

model {
    components {
        // Shim program
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            targetPlatform wpi.platforms.desktop

            sources.cpp {
                source {
                    srcDir 'src/shim/cpp'
                }
                exportedHeaders {
                    srcDir 'src/shim/include'

                    srcDir 'deps/wren/src/include'
                    srcDir 'deps/wrenbind17/include'
                    
                    include '**/*.hpp'
                }

                lib library: "wren", linkage: 'static'
            }

            wpi.deps.vendor.cpp(it)
            wpi.deps.wpilib(it)
        }
        // Wren VM
        wren(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
            targetPlatform wpi.platforms.desktop

            sources.c {
                source {
                    srcDir 'deps/wren/build'

                    include '**/*.c'
                }
                exportedHeaders {
                    srcDir 'deps/wren/src/include'
                }
            }
        }
    }
}

